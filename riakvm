#!/usr/bin/env node
var lib = require('./'),
  fs = require('fs'),
  p = require('commander'),
  baseURL = 'http://downloads.basho.com.s3-website-us-east-1.amazonaws.com/riak/';

/*
 * command line options
 */
p
  .version(require('./package').version)
  .option('-w, --where [dir]', 'where to create instance, defaults to cwd', process.cwd())
  .option('-n, --name [string]', 'name the output folder, defaults to untar name')
  ;

/*
 * command line commands :)
 */
p
  .command('create <version>')
  .description('create riak instance of version')
  .action(function(version){
    var mm = version.split('.')[0] + '.' + version.split('.')[1];
    var fileName = p.where + '/riakvm-temp-download' + new Date().toJSON() + '.tar.gz';
    var extractedDir = 'riak-' + version;
    lib.download({
      url:baseURL + mm +'/' + version + '/riak-' + version + '.tar.gz',
      fileName:fileName
    }, function(err){
      if(err){
        throw err;
      }
      lib.extract({
        fileName:fileName,
        dest:p.where,
        extractedDir:extractedDir
      }, function(err){
        if(err){
          throw err;
        }
        fs.unlink(fileName, function(){});
        var buildName = p.where + '/riak-' + version
        lib.build({
          dir:buildName
        }, function(err){
          if(err){
            throw err;
          }
          if(p.name){
            if(fs.existsSync(p.where + '/' + p.name)){
              throw new Error('Output dir exists. Not trying to delete your database: ' + p.where + '/' + p.name);
            } else {
              fs.renameSync(buildName, p.where + '/' + p.name);
            }
          }
        });
      });
    });
  });

p
  .command('ls [regex]')
  .description('list remote versions of Riak')
  .action(function(regex){
    lib.listVersions({url:baseURL}, function(err, versions){
      if (err) throw err;
      var async = require('async');
      var colors = require('colors');
      async.mapSeries(versions, function(v, cb){
        cb(null, console.log(v.v.green.bold + '\t' + v.p.join('\t')));
      }, process.exit);
    });
  });

/*
 * parse process.argv
 */
p
  .parse(process.argv);
